{"version":3,"sources":["../lang lazy /^/.//.*/.json$/ groupOptions: {} namespace object","serviceWorker.ts","redux/count/types.ts","redux/count/actions.ts","messages/messages.ts","App.tsx","redux/count/reducers.ts","redux/index.ts","redux/count/saga.ts","utils.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","Boolean","window","location","hostname","match","CountFunctionsEnum","recieveCounter","data","type","RECEIVE_COUNT","payload","defineMessages","car","defaultMessage","bus","App","props","state","increaseBy","this","count","increaseCounter","decreaseCounter","formatMessage","intl","className","Button","primary","onClick","Input","value","onChange","setState","Number","Label","Date","year","month","day","weekday","messages","React","Component","countFunctions","mapActionToProps","INCREASE_COUNT","DECREASE_COUNT","connect","injectIntl","initialState","getReducer","action","op","rootReducer","combineReducers","countReducer","watchCounters","watchApplicationFunctions","params","put","console","log","takeEvery","all","fork","loadLocaleData","locale","a","message","default","store","cache","createIntlCache","createIntl","defaultLocale","StrictMode","init","rootSaga","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","initStore","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.04a44519.chunk.js","sourcesContent":["var map = {\n\t\"./bn.json\": [\n\t\t275,\n\t\t3\n\t],\n\t\"./en.json\": [\n\t\t276,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 270;\nmodule.exports = webpackAsyncContext;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum CountFunctionsEnum {\n    INCREASE_COUNT = 'INCREASE_COUNT',\n    DECREASE_COUNT = 'DECREASE_COUNT',\n    RECEIVE_COUNT = 'RECEIVE_COUNT'\n}\n\ntype IncreaseCount = CountFunctionsEnum.INCREASE_COUNT;\ntype DecreaseCount = CountFunctionsEnum.DECREASE_COUNT;\ntype ReceiveCount = CountFunctionsEnum.RECEIVE_COUNT;\n\n// TODO: try to reduce further\nexport interface CountFunctions {\n    INCREASE_COUNT: IncreaseCount;\n    DECREASE_COUNT: DecreaseCount;\n    RECEIVE_COUNT: ReceiveCount\n}\n\nexport interface CountState {\n    count: number;\n}\n\nexport interface OperationState {\n    count: number;\n    op: string;\n}\n\ninterface IncreaseCountAction {\n    type: IncreaseCount,\n    payload: number\n}\n\ninterface DecreaseCountAction {\n    type: DecreaseCount,\n    payload: number\n}\n\ninterface ReceiveCountAction {\n    type: ReceiveCount,\n    payload: OperationState\n}\n\nexport type CounterTypes = IncreaseCountAction | DecreaseCountAction | ReceiveCountAction;","import {\n    CounterTypes, \n    CountFunctionsEnum,\n    OperationState\n} from './types';\n\nexport function increaseCounter(count: number): CounterTypes {\n    return {\n        type: CountFunctionsEnum.INCREASE_COUNT,\n        payload: count\n    }\n}\n\nexport function decreaseCounter(count: number): CounterTypes {\n    return {\n        type: CountFunctionsEnum.DECREASE_COUNT,\n        payload: count\n    }\n}\n\nexport function recieveCounter(data: OperationState): CounterTypes {\n    return {\n        type: CountFunctionsEnum.RECEIVE_COUNT,\n        payload: data\n    }\n}","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    car: {\n        id: 'vehicles.ford',\n        defaultMessage: 'Ford'\n    },\n    bus: {\n        id: 'vehicles.mercedes',\n        defaultMessage: 'Mercedes'\n    }\n});","import React from 'react';\nimport { Button, Label, Input } from 'semantic-ui-react';\nimport './App.css';\nimport { \n  increaseCounter as increaseCounterAction,\n  decreaseCounter as decreaseCounterAction\n} from './redux/count/actions';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from './redux/types';\nimport { FormattedDate, injectIntl, WrappedComponentProps } from 'react-intl';\nimport messages from './messages/messages';\n\nexport type GenericCallBack = (...args: any[]) => any;\n\nexport interface AppProps extends WrappedComponentProps {\n  count: any;\n  increaseCounter: any;\n  decreaseCounter: any;\n}\n\ninterface AppState {\n  increaseBy: number;\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      increaseBy: 0\n    }\n  }\n  render() {\n    const {\n      count: { count },\n      increaseCounter,\n      decreaseCounter,\n      intl: { formatMessage }\n    } = this.props;\n    const { increaseBy } = this.state;\n    return (\n      <div className=\"App\">\n        <div>abc</div>\n        <Button primary onClick={() => increaseCounter(increaseBy)}>Increase</Button>\n        <Input type=\"number\" value={increaseBy} onChange={(e, { value }) => {\n          this.setState((state) => ({\n            increaseBy: Number(value)\n          }));\n        }}></Input>\n        <Button primary onClick={() => decreaseCounter(increaseBy)}>Decrease</Button>\n        <Label>{count}</Label><br/>\n        <FormattedDate\n          value={new Date(1459913574887)}\n          year=\"numeric\"\n          month=\"long\"\n          day=\"numeric\"\n          weekday=\"long\"\n        />\n        {formatMessage(messages.car)}\n        {formatMessage(messages.bus)}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(\n  state: ApplicationState\n): Partial<AppProps> {\n  const { count } = state;\n  return {\n    count\n  };\n}\n  \nconst mapActionToProps: Partial<AppProps> = {\n  increaseCounter: increaseCounterAction,\n  decreaseCounter: decreaseCounterAction\n};\n\nexport default connect(\n  mapStateToProps,\n  mapActionToProps\n )(injectIntl(App));\n","import {\n    CounterTypes,\n    CountFunctions,\n    CountFunctionsEnum,\n    CountState\n} from './types';\n\nconst initialState: CountState = {\n    count: 0\n}\n\nconst getReducer = (countFunctions: CountFunctions) => (\n    state = initialState,\n    action: CounterTypes\n): CountState => {\n    switch(action.type) {\n        case countFunctions.RECEIVE_COUNT: {\n            switch(action.payload.op) {\n                case \"add\": \n                    return {\n                        count: state.count + action.payload.count\n                    }\n                case \"sub\":\n                default:\n                    return {\n                        count: state.count - action.payload.count\n                    }\n            }\n        }\n        case countFunctions.INCREASE_COUNT:\n        case countFunctions.DECREASE_COUNT:\n        default: {\n            return state\n        }\n    }\n}\n\nexport default getReducer(CountFunctionsEnum);","import { combineReducers } from \"redux\";\nimport countReducer from \"./count/reducers\";\n\nexport const rootReducer = combineReducers({\n    count: countReducer\n})\n\n// export default function rootReducer(state: CombinedState<{ count: CountState; }> | undefined, action: CounterTypes) {\n//     return applicationReducers(state, action);\n// }\nexport type RootState = ReturnType<typeof rootReducer>","import { CountFunctionsEnum } from \"./types\";\nimport { all, fork, put, takeEvery } from 'redux-saga/effects';\nimport { recieveCounter } from \"./actions\";\n\n// function* increaseCounter(params: { payload: { count: any; }; }) {\nfunction* increaseCounter(params: {type: CountFunctionsEnum, payload: number}) {\n    try {\n        //add some delay\n        yield put(recieveCounter({count: params.payload, op: 'add'}));\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* decreaseCounter(params: {type: CountFunctionsEnum, payload: number}) {\n    try {\n        //add some delay\n        yield put(recieveCounter({count: params.payload, op: 'sub'}));\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport function* watchCounters() {\n    yield takeEvery(\n        CountFunctionsEnum.INCREASE_COUNT,\n        increaseCounter\n    );\n    yield takeEvery(\n        CountFunctionsEnum.DECREASE_COUNT,\n        decreaseCounter\n    );\n}\n\nexport function* watchApplicationFunctions() {\n    yield all([\n      fork(watchCounters)\n    ]);\n  }\n  ","import React from \"react\";\nimport { createIntlCache, createIntl, IntlProvider } from \"react-intl\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { all, fork } from \"redux-saga/effects\";\nimport App from \"./App\";\nimport { rootReducer } from \"./redux\";\nimport { watchApplicationFunctions } from \"./redux/count\";\n\n// init store\nexport const initStore = () => {\n  function* rootSaga() {\n    yield all([fork(watchApplicationFunctions)]);\n  }\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\n\n// intl utils\nexport async function loadLocaleData(locale: string) {\n  const message = await import(`../lang/${locale}.json`);\n  return message.default;\n}\n\n// init\nexport const init = async (locale: string, store) => {\n  // init intl\n  const cache = createIntlCache();\n  const messages = await loadLocaleData(locale);\n  const intl = createIntl({\n    locale,\n    messages,\n    defaultLocale: 'bn',\n  }, cache);\n\n  return (\n    <IntlProvider {...intl}>\n      <Provider store={store}>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n      </Provider>\n    </IntlProvider>\n  );\n};","import ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport { init, initStore } from './utils';\n\n// init store\nconst store = initStore();\n\n// init intl\nconst locale = 'en';\n\n// init\ninit(locale, store).then(app => {\n  ReactDOM.render(app, document.getElementById('root'));\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}