{"version":3,"sources":["../lang lazy /^/.//.*/.json$/ groupOptions: {} namespace object","serviceWorker.ts","redux/count/types.ts","messages/messages.ts","containers/DateTime.tsx","redux/count/actions.ts","containers/Counter.tsx","components/Navbar.tsx","App.tsx","redux/count/reducers.ts","redux/index.ts","redux/count/saga.ts","themes/light.ts","utils.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","Boolean","window","location","hostname","match","CountFunctionsEnum","defineMessages","car","defaultMessage","bus","injectIntl","formatMessage","intl","StyledDiv","value","Date","year","month","day","weekday","messages","recieveCounter","data","type","RECEIVE_COUNT","payload","mapActionToProps","increaseCounter","count","INCREASE_COUNT","decreaseCounter","DECREASE_COUNT","connect","state","useState","increaseBy","setIncreaseBy","Button","primary","onClick","Input","onChange","Number","Label","NavBar","to","countFunctions","styled","div","props","theme","background","pageBackground","App","exact","path","React","Component","initialState","getReducer","action","op","rootReducer","combineReducers","countReducer","watchCounters","watchApplicationFunctions","params","put","console","log","takeEvery","all","fork","colors","body","lightTheme","loadLocaleData","locale","a","message","default","store","cache","createIntlCache","createIntl","defaultLocale","StrictMode","init","rootSaga","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","initStore","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.62e39572.chunk.js","sourcesContent":["var map = {\n\t\"./bn.json\": [\n\t\t290,\n\t\t3\n\t],\n\t\"./en.json\": [\n\t\t291,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 285;\nmodule.exports = webpackAsyncContext;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum CountFunctionsEnum {\n    INCREASE_COUNT = 'INCREASE_COUNT',\n    DECREASE_COUNT = 'DECREASE_COUNT',\n    RECEIVE_COUNT = 'RECEIVE_COUNT'\n}\n\ntype IncreaseCount = CountFunctionsEnum.INCREASE_COUNT;\ntype DecreaseCount = CountFunctionsEnum.DECREASE_COUNT;\ntype ReceiveCount = CountFunctionsEnum.RECEIVE_COUNT;\n\n// TODO: try to reduce further\nexport interface CountFunctions {\n    INCREASE_COUNT: IncreaseCount;\n    DECREASE_COUNT: DecreaseCount;\n    RECEIVE_COUNT: ReceiveCount\n}\n\nexport interface CountState {\n    count: number;\n}\n\nexport interface OperationState {\n    count: number;\n    op: string;\n}\n\ninterface IncreaseCountAction {\n    type: IncreaseCount,\n    payload: number\n}\n\ninterface DecreaseCountAction {\n    type: DecreaseCount,\n    payload: number\n}\n\ninterface ReceiveCountAction {\n    type: ReceiveCount,\n    payload: OperationState\n}\n\nexport type CounterTypes = IncreaseCountAction | DecreaseCountAction | ReceiveCountAction;","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    car: {\n        id: 'vehicles.ford',\n        defaultMessage: 'Ford'\n    },\n    bus: {\n        id: 'vehicles.mercedes',\n        defaultMessage: 'Mercedes'\n    }\n});","import React from 'react';\nimport { FormattedDate, injectIntl, WrappedComponentProps } from 'react-intl';\nimport { StyledDiv } from '../App';\nimport messages from '../messages/messages';\n\nexport const DateTime: React.FC<WrappedComponentProps> = ({\n  intl: { formatMessage }\n}: WrappedComponentProps) => {\n  return (\n    <StyledDiv>\n      <FormattedDate\n        value={new Date(1459913574887)}\n        year=\"numeric\"\n        month=\"long\"\n        day=\"numeric\"\n        weekday=\"long\"\n      />\n      {formatMessage(messages.car)}\n      {formatMessage(messages.bus)}\n    </StyledDiv>\n  );\n};\n\nexport default injectIntl(DateTime);\n","import {\n    CounterTypes, \n    CountFunctionsEnum,\n    OperationState\n} from './types';\n\nexport function increaseCounter(count: number): CounterTypes {\n    return {\n        type: CountFunctionsEnum.INCREASE_COUNT,\n        payload: count\n    }\n}\n\nexport function decreaseCounter(count: number): CounterTypes {\n    return {\n        type: CountFunctionsEnum.DECREASE_COUNT,\n        payload: count\n    }\n}\n\nexport function recieveCounter(data: OperationState): CounterTypes {\n    return {\n        type: CountFunctionsEnum.RECEIVE_COUNT,\n        payload: data\n    }\n}","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Input, Label } from 'semantic-ui-react';\nimport { StyledDiv } from '../App';\nimport { \n  decreaseCounter as decreaseCounterAction,\n  increaseCounter as increaseCounterAction\n} from '../redux/count/actions';\nimport { ApplicationState } from '../redux/types';\n\nexport interface CounterProps {\n  count: any;\n  decreaseCounter: any;\n  increaseCounter: any;\n}\n\nexport const Counter: React.FC<CounterProps> = ({\n  count,\n  increaseCounter,\n  decreaseCounter\n}: CounterProps) => {\n  const [increaseBy, setIncreaseBy] = useState<number>(0)\n  return (\n    <StyledDiv>\n      <Button primary onClick={() => increaseCounter(increaseBy)}>Increase</Button>\n      <Input type=\"number\" value={increaseBy} onChange={(e, { value }) => {\n        setIncreaseBy(Number(value))\n      }}></Input>\n      <Button primary onClick={() => decreaseCounter(increaseBy)}>Decrease</Button>\n      <Label>{count.count}</Label><br/>\n    </StyledDiv>\n  );\n};\n\nfunction mapStateToProps(\n  state: ApplicationState\n): Partial<CounterProps> {\n  const { count } = state;\n  return {\n    count\n  };\n}\n  \nconst mapActionToProps: Partial<CounterProps> = {\n  increaseCounter: increaseCounterAction,\n  decreaseCounter: decreaseCounterAction\n};\n\nexport default connect(\n  mapStateToProps,\n  mapActionToProps\n )(Counter);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => {\n  return (\n    <div>\n      <h5>NAVBAR</h5>\n      <ul>\n        <li><Link to=\"/counter\">Counter</Link></li>\n        <li><Link to=\"/datetime\">Date & Time</Link></li>\n     \t</ul>\n      <hr />\n    </div>\n  );\n};\n\nexport default NavBar;","import React from 'react';\nimport styled from 'styled-components';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport DateTime from './containers/DateTime';\nimport Counter from './containers/Counter';\nimport NavBar from './components/Navbar';\n\nexport type GenericCallBack = (...args: any[]) => any;\n\nexport const StyledDiv = styled.div`\n  text-align: center;\n  background-color: ${props => props.theme.background.pageBackground}\n`;\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <>\n        <div>\n          <NavBar/>\n        </div>\n        <StyledDiv>\n          <Switch>\n            <Route exact path=\"/counter\">\n              <Counter />\n            </Route>\n            <Route exact path=\"/\">\n              <Redirect to=\"/counter\" />\n            </Route>\n            <Route exact path=\"/datetime\">\n              <DateTime />\n            </Route>\n            <Route path=\"*\">\n              <div>not found</div>\n            </Route>\n          </Switch>\n        </StyledDiv>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import {\n    CounterTypes,\n    CountFunctions,\n    CountFunctionsEnum,\n    CountState\n} from './types';\n\nconst initialState: CountState = {\n    count: 0\n}\n\nconst getReducer = (countFunctions: CountFunctions) => (\n    state = initialState,\n    action: CounterTypes\n): CountState => {\n    switch(action.type) {\n        case countFunctions.RECEIVE_COUNT: {\n            switch(action.payload.op) {\n                case \"add\": \n                    return {\n                        count: state.count + action.payload.count\n                    }\n                case \"sub\":\n                default:\n                    return {\n                        count: state.count - action.payload.count\n                    }\n            }\n        }\n        case countFunctions.INCREASE_COUNT:\n        case countFunctions.DECREASE_COUNT:\n        default: {\n            return state\n        }\n    }\n}\n\nexport default getReducer(CountFunctionsEnum);","import { combineReducers } from \"redux\";\nimport countReducer from \"./count/reducers\";\n\nexport const rootReducer = combineReducers({\n    count: countReducer\n})\n\n// export default function rootReducer(state: CombinedState<{ count: CountState; }> | undefined, action: CounterTypes) {\n//     return applicationReducers(state, action);\n// }\nexport type RootState = ReturnType<typeof rootReducer>","import { CountFunctionsEnum } from \"./types\";\nimport { all, fork, put, takeEvery } from 'redux-saga/effects';\nimport { recieveCounter } from \"./actions\";\n\n// function* increaseCounter(params: { payload: { count: any; }; }) {\nfunction* increaseCounter(params: {type: CountFunctionsEnum, payload: number}) {\n    try {\n        //add some delay\n        yield put(recieveCounter({count: params.payload, op: 'add'}));\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* decreaseCounter(params: {type: CountFunctionsEnum, payload: number}) {\n    try {\n        //add some delay\n        yield put(recieveCounter({count: params.payload, op: 'sub'}));\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport function* watchCounters() {\n    yield takeEvery(\n        CountFunctionsEnum.INCREASE_COUNT,\n        increaseCounter\n    );\n    yield takeEvery(\n        CountFunctionsEnum.DECREASE_COUNT,\n        decreaseCounter\n    );\n}\n\nexport function* watchApplicationFunctions() {\n    yield all([\n      fork(watchCounters)\n    ]);\n  }\n  ","import { Colors, Theme } from './types';\n\nconst colors: Colors = {\n  body: '#ABCDEF'\n};\n\nconst lightTheme: Theme = {\n  colors,\n  background: {\n    pageBackground: colors.body\n  }\n};\n\nexport default lightTheme;\n","import React from \"react\";\nimport { createIntlCache, createIntl, IntlProvider } from \"react-intl\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { all, fork } from \"redux-saga/effects\";\nimport App from \"./App\";\nimport { rootReducer } from \"./redux\";\nimport { watchApplicationFunctions } from \"./redux/count\";\nimport { ThemeProvider } from \"styled-components\";\nimport { BrowserRouter } from 'react-router-dom';\nimport { lightTheme } from \"./themes\";\n\n// init store\nexport const initStore = () => {\n  function* rootSaga() {\n    yield all([fork(watchApplicationFunctions)]);\n  }\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\n\n// intl utils\nexport async function loadLocaleData(locale: string) {\n  const message = await import(`../lang/${locale}.json`);\n  return message.default;\n}\n\n// init\nexport const init = async (locale: string, store) => {\n  // init intl\n  const cache = createIntlCache();\n  const messages = await loadLocaleData(locale);\n  const intl = createIntl({\n    locale,\n    messages,\n    defaultLocale: 'bn',\n  }, cache);\n\n  return (\n    <IntlProvider {...intl}>\n      <Provider store={store}>\n        <ThemeProvider theme={lightTheme}>\n          <BrowserRouter>\n            <React.StrictMode>\n              <App />\n            </React.StrictMode>\n          </BrowserRouter>\n        </ThemeProvider>\n      </Provider>\n    </IntlProvider>\n  );\n};","import ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport { init, initStore } from './utils';\n\n// init store\nconst store = initStore();\n\n// init intl\nconst locale = 'en';\n\n// init\ninit(locale, store).then(app => {\n  ReactDOM.render(app, document.getElementById('root'));\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}